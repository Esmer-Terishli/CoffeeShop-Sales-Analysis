ALTER TABLE coffeeshop_sales
ADD locations_count NUMBER;

UPDATE coffeeshop_sales
SET locations_count = 
    CASE
        WHEN branch_locations IS NULL THEN 1
        ELSE LENGTH(branch_locations) - LENGTH(REPLACE(branch_locations, ',', '')) + 2
    END;
    

ALTER TABLE coffeeshop_sales
ADD coffeeshop_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1 INCREMENT BY 1);


-- TEST -- distinct ile 41 setir qaytarir (dogrudur)
SELECT DISTINCT coffeeshop_name FROM coffeeshop_sales;
--



-- 1. c_coffeeshops
CREATE TABLE c_coffeeshops (
    coffeeshop_id NUMBER PRIMARY KEY,
    coffeeshop_name VARCHAR2(255),
    branch_locations VARCHAR2(255),
    has_other_branches VARCHAR2(20),
    most_popular_branch VARCHAR2(255),
    has_loyalty_card VARCHAR2(20)
);


INSERT INTO c_coffeeshops (
    coffeeshop_id,
    coffeeshop_name,
    branch_locations,
    has_other_branches,
    most_popular_branch,
    has_loyalty_card
)
SELECT
    coffeeshop_id,
    coffeeshop_name,
    branch_locations,
    has_other_branches,
    most_popular_branch,
    has_loyalty_card
FROM (
    SELECT 
        coffeeshop_id,
        coffeeshop_name,
        branch_locations,
        has_other_branches,
        most_popular_branch,
        has_loyalty_card,
        ROW_NUMBER() OVER (PARTITION BY coffeeshop_name ORDER BY ROWNUM) AS rn
    FROM coffeeshop_sales
)
WHERE rn = 1;


-- 
UPDATE c_coffeeshops
SET branch_locations = 'Filial yoxdur'
WHERE branch_locations IS NULL;

-- 
UPDATE c_coffeeshops
SET most_popular_branch = 'Filial yoxdur'
WHERE most_popular_branch IS NULL;

--
ALTER TABLE c_coffeeshops
ADD locations_count NUMBER;
--

UPDATE c_coffeeshops
SET locations_count = 
    CASE
        WHEN branch_locations = 'Filial yoxdur' THEN 1
        ELSE LENGTH(branch_locations) - LENGTH(REPLACE(branch_locations, ',', '')) + 2
    END;


--
ALTER TABLE c_coffeeshops
ADD logo_url VARCHAR2(500);

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/HjD8J5cG/42coffeeroasters.jpg'
WHERE coffeeshop_id = 1;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/QN43XhLb/baristica.avif'
WHERE coffeeshop_id = 2;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/DZQ1qxhv/beastcoffee.jpg'
WHERE coffeeshop_id = 3;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/QNbpCYSS/belgian.jpg'
WHERE coffeeshop_id = 4;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/c4Lfn7bW/bluebird.png'
WHERE coffeeshop_id = 5;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/2575GM1K/brewmood.jpg'
WHERE coffeeshop_id = 6;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/B6ZnVpDQ/cafebotanist.png'
WHERE coffeeshop_id = 7;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/jqFSMzjt/chocolatier.webp'
WHERE coffeeshop_id = 8;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/zvb5scf5/cinnabon.png'
WHERE coffeeshop_id = 9;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/y6t7msfN/coffeedomingo.webp'
WHERE coffeeshop_id = 10;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/W4NVN345/coffeego.jpg'
WHERE coffeeshop_id = 11;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/cJFSrSg0/coffeehub.avif'
WHERE coffeeshop_id = 12;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/DZD3PPPN/coffeelaross.jpg'
WHERE coffeeshop_id = 13;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/8sg8qk3B/coffeelikeu.png'
WHERE coffeeshop_id = 14;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/sfkvVYCK/coffeemode.png'
WHERE coffeeshop_id = 15;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/MK1XXnWw/coffeenero.png'
WHERE coffeeshop_id = 16;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/RZRFQ26b/coffeelea.png'
WHERE coffeeshop_id = 17;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/br78p9Gn/coffeebar.png'
WHERE coffeeshop_id = 18;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/BvnvhN2Z/coffeemanianext.png'
WHERE coffeeshop_id = 19;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/8CXzxWbR/coffeemoon.png'
WHERE coffeeshop_id = 20;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/k4kXgmzD/costacoffee.jpg'
WHERE coffeeshop_id = 21;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/QC1NBzZm/cozycoffee.png'
WHERE coffeeshop_id = 22;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/Pfw5FCvD/croque.avif'
WHERE coffeeshop_id = 23;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/jdYSVRyF/cupcup.jpg'
WHERE coffeeshop_id = 24;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/tCdCp85C/dejavu.jpg'
WHERE coffeeshop_id = 25;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/7ZmHT7dF/friends.jpg'
WHERE coffeeshop_id = 26;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/s2xVPxRv/fuzzy.png'
WHERE coffeeshop_id = 27;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/XvPnsWVx/gloria.jpg'
WHERE coffeeshop_id = 28;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/4dhsM0yG/jini.png'
WHERE coffeeshop_id = 29;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/qqV4dG63/kaffein.png'
WHERE coffeeshop_id = 30;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/FzymFJ0n/lavazza.jpg'
WHERE coffeeshop_id = 31;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/fWmMf11j/milklab.png'
WHERE coffeeshop_id = 32;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/wTzgf0pK/secondcup.png'
WHERE coffeeshop_id = 33;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/zXk59Kzy/sketchcoffee.png'
WHERE coffeeshop_id = 34;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/x1TYY88t/socialbee.png'
WHERE coffeeshop_id = 35;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/htynGn7g/starbucks.jpg'
WHERE coffeeshop_id = 36;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/rpDk0HS4/storiescoffee.png'
WHERE coffeeshop_id = 37;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/DzRKqcgM/street9bar.jpg'
WHERE coffeeshop_id = 38;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/bJbfL2VN/unitedcoffeebeans.png'
WHERE coffeeshop_id = 39;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/rskXHF7G/whitemind.jpg'
WHERE coffeeshop_id = 40;

UPDATE c_coffeeshops
SET logo_url = 'https://i.postimg.cc/sx4dCCRk/zebracoffee.png'
WHERE coffeeshop_id = 41;

--
ALTER TABLE c_coffeeshops
ADD brand_type VARCHAR(20);

UPDATE c_coffeeshops
SET brand_type = 'Branded'
WHERE coffeeshop_id IN (9, 21, 28, 31, 33, 36);

UPDATE c_coffeeshops
SET brand_type = 'Local'
WHERE brand_type IS NULL;


commit;

-- 2. c_branches
CREATE TABLE c_branches (
    branch_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    coffeeshop_id NUMBER, 
    branch VARCHAR2(255),
    seating_capacity NUMBER,
    has_dietary_options VARCHAR2(20),
    phone VARCHAR2(20),
    CONSTRAINT fk_coffeeshop FOREIGN KEY (coffeeshop_id) REFERENCES c_coffeeshops (coffeeshop_id) ON DELETE CASCADE
);


INSERT INTO c_branches (coffeeshop_id, branch, seating_capacity, has_dietary_options, phone)
SELECT 
    coffeeshop_id, 
    branch AS branch, 
    seating_capacity, 
    has_dietary_options AS has_dietary_options, 
    phone
FROM coffeeshop_sales;



UPDATE coffeeshop_sales
SET coffeeshop_id = (
    SELECT coffeeshop_id
    FROM c_coffeeshops
    WHERE c_coffeeshops.coffeeshop_name = coffeeshop_sales.coffeeshop_name
)
WHERE EXISTS (
    SELECT 1
    FROM c_coffeeshops
    WHERE c_coffeeshops.coffeeshop_name = coffeeshop_sales.coffeeshop_name
);

--
ALTER TABLE c_branches
ADD branch_name VARCHAR2(510);

UPDATE c_branches b
SET branch_name = (
    SELECT c.coffeeshop_name || ' - ' || b.branch
    FROM c_coffeeshops c
    WHERE c.coffeeshop_id = b.coffeeshop_id
);

--
ALTER TABLE c_branches
ADD (
    latitude NUMBER(10, 6),
    longitude NUMBER(10, 6)
);

-- Nizami
UPDATE c_branches
SET latitude = 40.3793, longitude = 49.8307
WHERE LOWER(branch) = 'nizami';

-- Elmlar Akademiyası
UPDATE c_branches
SET latitude = 40.3750, longitude = 49.8135
WHERE LOWER(branch) = 'elmlar akademiyası';

-- 28 mall
UPDATE c_branches
SET latitude = 40.3791, longitude = 49.8469
WHERE LOWER(branch) = '28 mall';

-- 28-May
UPDATE c_branches
SET latitude = 40.3799, longitude = 49.8460
WHERE LOWER(branch) = '28-may';

-- Crescent mall
UPDATE c_branches
SET latitude = 40.3741, longitude = 49.8604
WHERE LOWER(branch) = 'crescent mall';

-- Daniz mall
UPDATE c_branches
SET latitude = 40.3585, longitude = 49.8370
WHERE LOWER(branch) = 'daniz mall';

-- Targovy
UPDATE c_branches
SET latitude = 40.3695, longitude = 49.8398
WHERE LOWER(branch) = 'targovy';

-- White City
UPDATE c_branches
SET latitude = 40.3800, longitude = 49.8888
WHERE LOWER(branch) = 'white city';

-- Khatai
UPDATE c_branches
SET latitude = 40.3833, longitude = 49.8720
WHERE LOWER(branch) = 'khatai';

-- Ganjlik
UPDATE c_branches
SET latitude = 40.4007, longitude = 49.8516
WHERE LOWER(branch) = 'ganjlik';

-- Ganjlik mall
UPDATE c_branches
SET latitude = 40.4003, longitude = 49.8529
WHERE LOWER(branch) = 'ganjlik mall';

-- Nariman Narimanov
UPDATE c_branches
SET latitude = 40.4026, longitude = 49.8688
WHERE LOWER(branch) = 'nariman narimanov';

-- Gara Garayev pr.61
UPDATE c_branches
SET latitude = 40.4118, longitude = 49.9418
WHERE LOWER(branch) = 'gara garayev pr.61';

-- Hazi Aslanov
UPDATE c_branches
SET latitude = 40.3732, longitude = 49.9535
WHERE LOWER(branch) = 'hazi aslanov';


SELECT * FROM c_branches;


-- 3. c_branch_performance_sales
CREATE TABLE c_branch_performance_sales (
    branch_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    
    peak_hours VARCHAR2(255),
    busiest_days VARCHAR2(255),
    peak_season VARCHAR2(255),
    best_weather_for_visits VARCHAR2(255),
    best_selling_product VARCHAR2(255),
    least_selling_product VARCHAR2(255),
    avg_time_spent VARCHAR2(50),
    dominant_age_group VARCHAR2(50),
    new_vs_loyal_customers VARCHAR2(50),
    visit_purpose VARCHAR2(255),
    solo_vs_group_visits VARCHAR2(50),
    customer_reaction_to_discounts VARCHAR2(50),
    holiday_customer_increase VARCHAR2(50),
    rating NUMBER(3,2) CHECK (rating BETWEEN 0 AND 5),
    review_count NUMBER DEFAULT 0,
    excellent_reviews NUMBER DEFAULT 0,
    good_reviews NUMBER DEFAULT 0,
    average_reviews NUMBER DEFAULT 0,
    poor_reviews NUMBER DEFAULT 0,
    terrible_reviews NUMBER DEFAULT 0,

    preferred_payment_method VARCHAR2(255),
    avg_order_price VARCHAR2(30),
    wolt_vs_inhouse_orders VARCHAR2(255),
    most_preferred_size VARCHAR2(50)
);


INSERT INTO c_branch_performance_sales (
    peak_hours, 
    busiest_days, 
    peak_season, 
    best_weather_for_visits, 
    best_selling_product, 
    least_selling_product, 
    avg_time_spent, 
    dominant_age_group, 
    new_vs_loyal_customers, 
    visit_purpose, 
    solo_vs_group_visits, 
    customer_reaction_to_discounts, 
    holiday_customer_increase, 
    rating, 
    review_count, 
    excellent_reviews, 
    good_reviews, 
    average_reviews, 
    poor_reviews, 
    terrible_reviews, 
    preferred_payment_method, 
    avg_order_price, 
    wolt_vs_inhouse_orders, 
    most_preferred_size
)
SELECT 
    peak_hours, 
    busiest_days, 
    peak_season, 
    best_weather_for_visits, 
    best_selling_product, 
    least_selling_product, 
    avg_time_spent, 
    dominant_age_group, 
    new_vs_loyal_customers, 
    visit_purpose, 
    solo_vs_group_visits, 
    customer_reaction_to_discounts, 
    holiday_customer_increase, 
    rating, 
    review_count, 
    excellent_reviews, 
    good_reviews, 
    average_reviews, 
    poor_reviews, 
    terrible_reviews, 
    preferred_payment_method, 
    avg_order_price, 
    wolt_vs_inhouse_orders, 
    most_preferred_size
FROM coffeeshop_sales;

ALTER TABLE c_branch_performance_sales
ADD CONSTRAINT fk_branch_id
FOREIGN KEY (branch_id)
REFERENCES c_branches(branch_id);

commit;
--
ALTER TABLE c_branch_performance_sales
ADD peak_hours_grouped VARCHAR2(50);

UPDATE c_branch_performance_sales
SET peak_hours_grouped = CASE 
    WHEN peak_hours = 'Günorta (12:00 - 16:00)' THEN '12:00 - 16:00'
    WHEN peak_hours = 'Axşam (16:00 - 22:00)' THEN '16:00 - 22:00'
    WHEN peak_hours = 'Günorta (12:00 - 16:00), Axşam (16:00 - 22:00)' THEN '12:00 - 22:00'
    WHEN peak_hours = 'Səhər (08:00 - 12:00), Günorta (12:00 - 16:00), Axşam (16:00 - 22:00)' THEN '08:00 - 22:00'
    WHEN peak_hours = 'Səhər (08:00 - 12:00)' THEN '08:00 - 12:00'
    WHEN peak_hours = 'Səhər (08:00 - 12:00), Günorta (12:00 - 16:00)' THEN '08:00 - 16:00'
    ELSE peak_hours
END;

--
ALTER TABLE c_branch_performance_sales
ADD busiest_days_grouped VARCHAR2(20);

UPDATE c_branch_performance_sales
SET busiest_days_grouped = CASE
    WHEN busiest_days = 'Şənbə, Bazar' THEN 'weekend'
    WHEN busiest_days = 'Bazar ertəsi, Çərşənbə axşamı, Çərşənbə, Cümə axşamı, Cümə' THEN 'weekdays'
    ELSE busiest_days
END;

--
ALTER TABLE c_branch_performance_sales 
ADD age_group VARCHAR2(50);

UPDATE c_branch_performance_sales
SET age_group = CASE
    WHEN dominant_age_group = '18-24, 25-34' THEN '18-34'
    WHEN dominant_age_group = '18-24, 25-34, 35-44' THEN '18-44'
    WHEN dominant_age_group = '18-24' THEN '18-24'
    ELSE dominant_age_group
END;

--
ALTER TABLE c_branch_performance_sales 
ADD (
    for_coffee_only NUMBER(1) DEFAULT 0,
    social_meetings NUMBER(1) DEFAULT 0,
    work_in_place NUMBER(1) DEFAULT 0
);



UPDATE c_branch_performance_sales
SET 
   for_coffee_only = CASE 
        WHEN visit_purpose LIKE '%Sadəcə qəhvə içmək üçün%' THEN 1
        ELSE 0
    END,
    social_meetings = CASE 
        WHEN visit_purpose LIKE '%Sosial görüşlər%' THEN 1
        ELSE 0
    END,
    work_in_place = CASE 
        WHEN visit_purpose LIKE '%Məkan içində iş görmək%' THEN 1
        ELSE 0
    END;


-- 4. c_branch_features
CREATE TABLE c_branch_features (
    branch_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    accepts_credit_cards NUMBER(1) CHECK (accepts_credit_cards IN (0,1)),
    seating NUMBER(1) CHECK (seating IN (0,1)),
    free_wifi NUMBER(1) CHECK (free_wifi IN (0,1)),
    visa NUMBER(1) CHECK (visa IN (0,1)),
    mastercard NUMBER(1) CHECK (mastercard IN (0,1)),
    delivery NUMBER(1) CHECK (delivery IN (0,1)),
    takeout NUMBER(1) CHECK (takeout IN (0,1)),
    reservations NUMBER(1) CHECK (reservations IN (0,1)),
    street_parking NUMBER(1) CHECK (street_parking IN (0,1)),
    parking_available NUMBER(1) CHECK (parking_available IN (0,1)),
    family_style NUMBER(1) CHECK (family_style IN (0,1)),
    digital_payments NUMBER(1) CHECK (digital_payments IN (0,1)),
    table_service NUMBER(1) CHECK (table_service IN (0,1)),
    serves_alcohol NUMBER(1) CHECK (serves_alcohol IN (0,1)),
    outdoor_seating NUMBER(1) CHECK (outdoor_seating IN (0,1)),
    dog_friendly NUMBER(1) CHECK (dog_friendly IN (0,1)),
    full_bar NUMBER(1) CHECK (full_bar IN (0,1)),
    wheelchair_accessible NUMBER(1) CHECK (wheelchair_accessible IN (0,1)),
    non_smoking_restaurants NUMBER(1) CHECK (non_smoking_restaurants IN (0,1)),
    cash_only NUMBER(1) CHECK (cash_only IN (0,1)),
    discover NUMBER(1) CHECK (discover IN (0,1)),
    free_off_street_parking NUMBER(1) CHECK (free_off_street_parking IN (0,1)),
    drive_thru NUMBER(1) CHECK (drive_thru IN (0,1)),
    television NUMBER(1) CHECK (television IN (0,1)),
    live_music NUMBER(1) CHECK (live_music IN (0,1)),
    highchairs_available NUMBER(1) CHECK (highchairs_available IN (0,1)),
    gift_cards_available NUMBER(1) CHECK (gift_cards_available IN (0,1)),
    private_dining NUMBER(1) CHECK (private_dining IN (0,1)),
    playgrounds NUMBER(1) CHECK (playgrounds IN (0,1)),
    buffet NUMBER(1) CHECK (buffet IN (0,1)),
    sports_bars NUMBER(1) CHECK (sports_bars IN (0,1)),
    jazz_bar NUMBER(1) CHECK (jazz_bar IN (0,1)),
    validated_parking NUMBER(1) CHECK (validated_parking IN (0,1)),
    valet_parking NUMBER(1) CHECK (valet_parking IN (0,1)),
    waterfront NUMBER(1) CHECK (waterfront IN (0,1)),
    beach NUMBER(1) CHECK (beach IN (0,1))
);


INSERT INTO c_branch_features (
    accepts_credit_cards,
    seating,
    free_wifi,
    visa,
    mastercard,
    delivery,
    takeout,
    reservations,
    street_parking,
    parking_available,
    family_style,
    digital_payments,
    table_service,
    serves_alcohol,
    outdoor_seating,
    dog_friendly,
    full_bar,
    wheelchair_accessible,
    non_smoking_restaurants,
    cash_only,
    discover,
    free_off_street_parking,
    drive_thru,
    television,
    live_music,
    highchairs_available,
    gift_cards_available,
    private_dining,
    playgrounds,
    buffet,
    sports_bars,
    jazz_bar,
    validated_parking,
    valet_parking,
    waterfront,
    beach
)
SELECT 
    accepts_credit_cards,
    seating,
    free_wifi,
    visa,
    mastercard,
    delivery,
    takeout,
    reservations,
    street_parking,
    parking_available,
    family_style,
    digital_payments,
    table_service,
    serves_alcohol,
    outdoor_seating,
    dog_friendly,
    full_bar,
    wheelchair_accessible,
    non_smoking_restaurants,
    cash_only,
    discover,
    free_off_street_parking,
    drive_thru,
    television,
    live_music,
    highchairs_available,
    gift_cards_available,
    private_dining,
    playgrounds,
    buffet,
    sports_bars,
    jazz_bar,
    validated_parking,
    valet_parking,
    waterfront,
    beach
FROM coffeeshop_sales;

ALTER TABLE c_branch_features
ADD CONSTRAINT fk_branch_features
FOREIGN KEY (branch_id)
REFERENCES c_branches(branch_id);

commit;

SELECT * FROM c_branch_features;

-- 5. c_coffeeshop_campaigns table
CREATE TABLE c_coffeeshop_campaigns (
    branch_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    recent_campaign_types VARCHAR2(255),
    products_in_campaigns VARCHAR2(255),
    sales_difference_after_campaigns VARCHAR2(255)
);

INSERT INTO c_coffeeshop_campaigns (
    recent_campaign_types, 
    products_in_campaigns, 
    sales_difference_after_campaigns
)
SELECT 
    recent_campaign_types, 
    products_in_campaigns, 
    sales_difference_after_campaigns
FROM coffeeshop_sales;


--
ALTER TABLE c_coffeeshop_campaigns
ADD CONSTRAINT fk_campaigns_branch
FOREIGN KEY (branch_id)
REFERENCES c_branches(branch_id);


SELECT * FROM c_coffeeshop_campaigns;


-- 6. c_products
CREATE TABLE c_products (
    product_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    product_name VARCHAR2(255) UNIQUE NOT NULL
);

INSERT INTO c_products (product_name) VALUES ('Americano');
INSERT INTO c_products (product_name) VALUES ('Latte');
INSERT INTO c_products (product_name) VALUES ('Espresso');
INSERT INTO c_products (product_name) VALUES ('Cappuccino');
INSERT INTO c_products (product_name) VALUES ('RafCoffee');
INSERT INTO c_products (product_name) VALUES ('WhiteMocha');
INSERT INTO c_products (product_name) VALUES ('BlackMocha');
INSERT INTO c_products (product_name) VALUES ('HotChocolate');
INSERT INTO c_products (product_name) VALUES ('Tea');



-- 7. c_product_prices
CREATE TABLE c_product_prices (
    price_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    coffeeshop_id NUMBER REFERENCES c_coffeeshops(coffeeshop_id) ON DELETE CASCADE,
    product_id NUMBER REFERENCES c_products(product_id) ON DELETE CASCADE,
    price NUMBER(5,2)
);

INSERT INTO c_product_prices (coffeeshop_id, product_id, price)
SELECT cs.coffeeshop_id,
       p.product_id,
       CASE 
           WHEN p.product_name = 'Americano' THEN cs.americano_price
           WHEN p.product_name = 'Latte' THEN cs.latte_price
           WHEN p.product_name = 'Espresso' THEN cs.espresso_price
           WHEN p.product_name = 'Cappuccino' THEN cs.cappuccino_price
           WHEN p.product_name = 'RafCoffee' THEN cs.rafcoffee_price
           WHEN p.product_name = 'WhiteMocha' THEN cs.whitemocha_price
           WHEN p.product_name = 'BlackMocha' THEN cs.blackmocha_price
           WHEN p.product_name = 'HotChocolate' THEN cs.hotchocolate_price
           WHEN p.product_name = 'Tea' THEN cs.tea_price
       END AS price
FROM coffeeshop_sales cs
JOIN c_products p ON p.product_name IN ('Americano', 'Latte', 'Espresso', 'Cappuccino', 'RafCoffee', 'WhiteMocha', 'BlackMocha', 'HotChocolate', 'Tea');

select * from c_product_prices; -- 747 rows

UPDATE c_product_prices
SET price = 7
WHERE price IS NULL; -- 1 row updated


-- 8. c_wolt_prices
CREATE TABLE c_wolt_prices (
    wolt_price_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    coffeeshop_id NUMBER REFERENCES c_coffeeshops(coffeeshop_id) ON DELETE CASCADE,
    product_id NUMBER REFERENCES c_products(product_id) ON DELETE CASCADE,
    price NUMBER(5,2)
);


INSERT INTO c_wolt_prices (coffeeshop_id, product_id, price)
SELECT cs.coffeeshop_id,
       p.product_id,
       CASE 
           WHEN p.product_name = 'Americano' THEN cw.americano_price
           WHEN p.product_name = 'Latte' THEN cw.latte_price
           WHEN p.product_name = 'Espresso' THEN cw.espresso_price
           WHEN p.product_name = 'Cappuccino' THEN cw.cappuccino_price
           WHEN p.product_name = 'RafCoffee' THEN cw.rafcoffee_price
           WHEN p.product_name = 'WhiteMocha' THEN cw.whitemocha_price
           WHEN p.product_name = 'BlackMocha' THEN cw.blackmocha_price
           WHEN p.product_name = 'HotChocolate' THEN cw.hotchocolate_price
           WHEN p.product_name = 'Tea' THEN cw.tea_price
       END AS price
FROM coffeeshop_sales cs
JOIN coffeeshop_wolt cw 
  ON LOWER(TRIM(cs.coffeeshop_name)) = LOWER(TRIM(cw.coffeeshop_name))
JOIN c_products p ON p.product_name IN (
    'Americano', 'Latte', 'Espresso', 'Cappuccino',
    'RafCoffee', 'WhiteMocha', 'BlackMocha', 'HotChocolate', 'Tea'
)
WHERE 
  CASE 
    WHEN p.product_name = 'Americano' THEN cw.americano_price
    WHEN p.product_name = 'Latte' THEN cw.latte_price
    WHEN p.product_name = 'Espresso' THEN cw.espresso_price
    WHEN p.product_name = 'Cappuccino' THEN cw.cappuccino_price
    WHEN p.product_name = 'RafCoffee' THEN cw.rafcoffee_price
    WHEN p.product_name = 'WhiteMocha' THEN cw.whitemocha_price
    WHEN p.product_name = 'BlackMocha' THEN cw.blackmocha_price
    WHEN p.product_name = 'HotChocolate' THEN cw.hotchocolate_price
    WHEN p.product_name = 'Tea' THEN cw.tea_price
  END IS NOT NULL;


UPDATE c_wolt_prices
SET price = 7
WHERE price = 0;

select * from c_wolt_prices; -- 747 rows

-- 9. c_reviews
DELETE FROM coffeeshop_reviews
WHERE coffeeshop_name IS NULL;

DELETE FROM coffeeshop_reviews
WHERE title IS NULL;


CREATE TABLE c_reviews AS
SELECT 
    DENSE_RANK() OVER (ORDER BY coffeeshop_name) AS coffeeshop_id,
    coffeeshop_name,
    coffeeshop_url,
    rating,
    title,
    content,
    reviewtype
FROM 
    coffeeshop_reviews;



INSERT INTO c_reviews (coffeeshop_id, coffeeshop_name, coffeeshop_url, rating, title, content, reviewtype)
SELECT 
    DENSE_RANK() OVER (ORDER BY coffeeshop_name) AS coffeeshop_id,
    coffeeshop_name,
    coffeeshop_url,
    rating,
    title,
    content,
    reviewtype
FROM 
    coffeeshop_reviews;


ALTER TABLE c_reviews
ADD CONSTRAINT fk_coffeeshopp
FOREIGN KEY (coffeeshop_id)
REFERENCES c_coffeeshops(coffeeshop_id);



SELECT * FROM c_reviews;

commit;

-- 10. c_transactions
CREATE TABLE c_transactions (
    transaction_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    transaction_date DATE NOT NULL,
    transaction_time VARCHAR2(8),
    transaction_qty NUMBER NOT NULL CHECK (transaction_qty > 0),
    branch_id NUMBER,
    product_id NUMBER,
    isflagwolt VARCHAR2(3) CHECK (isflagwolt IN ('YES', 'NO')),
    shift VARCHAR2(10) CHECK (shift IN ('morning', 'afternoon', 'evening')),
    season VARCHAR2(10) CHECK (season IN ('spring', 'summer', 'autumn', 'winter')),
    price NUMBER,
    CONSTRAINT fk_branch FOREIGN KEY (branch_id) REFERENCES c_branches(branch_id) ON DELETE CASCADE,
    CONSTRAINT fk_product FOREIGN KEY (product_id) REFERENCES c_products(product_id) ON DELETE CASCADE
);



INSERT INTO c_transactions (transaction_date, transaction_time, transaction_qty, branch_id, product_id, isflagwolt, shift, season, price)
SELECT
    TO_DATE(t.transaction_date, 'DD-MM-YYYY') AS transaction_date,
    t.transaction_time,
    t.transaction_qty,
    t.branch_id,
    t.product_id,
    t.isflagwolt,
    t.shift,
    t.season,
    CASE 
        WHEN t.isflagwolt = 'YES' THEN wp.price
        WHEN t.isflagwolt = 'NO' THEN pp.price
    END AS price
FROM
    coffeeshop_transactions t
JOIN
    c_products p ON t.product_id = p.product_id
JOIN
    c_branches b ON t.branch_id = b.branch_id
LEFT JOIN
    c_product_prices pp 
    ON t.product_id = pp.product_id
    AND pp.coffeeshop_id = b.coffeeshop_id
LEFT JOIN
    c_wolt_prices wp 
    ON t.product_id = wp.product_id
    AND wp.coffeeshop_id = b.coffeeshop_id
WHERE
    t.isflagwolt IN ('YES', 'NO')
    AND t.transaction_date IS NOT NULL
    AND t.transaction_time IS NOT NULL;



-- Delete
DELETE FROM c_transactions
WHERE ROWID NOT IN (
    SELECT MIN(ROWID)
    FROM c_transactions
    GROUP BY transaction_date, transaction_time, transaction_qty, branch_id, product_id, isflagwolt, shift, season
);

--
ALTER TABLE c_transactions
ADD total_amount AS (transaction_qty * price);


-------------------------------
SELECT * FROM coffeeshop_sales;
SELECT * FROM coffeeshop_wolt;
SELECT * FROM coffeeshop_reviews;
SELECT * FROM coffeeshop_transactions;

SELECT * FROM c_coffeeshops;
SELECT * FROM c_branches;
SELECT * FROM c_branch_performance_sales;   
SELECT * FROM c_branch_features;
SELECT * FROM c_coffeeshop_campaigns;
SELECT * FROM c_products;
SELECT * FROM c_product_prices;
SELECT * FROM c_wolt_prices;
SELECT * FROM c_reviews;
SELECT * FROM c_transactions;


commit;

-------------------------------
--DROP TABLE coffeeshop_sales;
--DROP TABLE coffeeshop_wolt;
--DROP TABLE  coffeeshop_reviews;
--DROP TABLE coffeeshop_transactions;
--
--DROP TABLE c_coffeeshops;
--DROP TABLE c_branches;
--DROP TABLE c_branch_performance_sales;
--DROP TABLE c_branch_features;
--DROP TABLE c_coffeeshop_campaigns;
--DROP TABLE c_products;
--DROP TABLE c_product_prices;
--DROP TABLE c_wolt_prices;
--DROP TABLE c_reviews;
--DROP TABLE c_transactions;
-------------------------------

-- Top performing coffee shops by average rating
SELECT 
    c.coffeeshop_name,
    AVG(bps.rating) as avg_rating,
    SUM(bps.review_count) as total_reviews,
    SUM(bps.excellent_reviews) as excellent_count
FROM c_branch_performance_sales bps
JOIN c_branches b ON bps.branch_id = b.branch_id
JOIN c_coffeeshops c ON b.coffeeshop_id = c.coffeeshop_id
GROUP BY c.coffeeshop_name
ORDER BY avg_rating DESC;

-- Daily revenue by shift
SELECT 
    t.shift,
    TO_CHAR(t.transaction_date, 'DAY') as day_of_week,
    SUM(t.total_amount) as total_revenue,
    COUNT(t.transaction_id) as transaction_count
FROM c_transactions t
GROUP BY t.shift, TO_CHAR(t.transaction_date, 'DAY')
ORDER BY total_revenue DESC;

-- Product popularity and revenue
SELECT 
    p.product_name,
    COUNT(t.transaction_id) as sales_count,
    SUM(t.total_amount) as total_revenue,
    AVG(t.price) as avg_price
FROM c_transactions t
JOIN c_products p ON t.product_id = p.product_id
GROUP BY p.product_name
ORDER BY total_revenue DESC;

-- Seasonal sales patterns
SELECT 
    c.coffeeshop_name,
    t.season,
    COUNT(t.transaction_id) as transaction_count,
    SUM(t.total_amount) as total_revenue,
    AVG(t.total_amount) as avg_transaction_value
FROM c_transactions t
JOIN c_branches b ON t.branch_id = b.branch_id
JOIN c_coffeeshops c ON b.coffeeshop_id = c.coffeeshop_id
GROUP BY c.coffeeshop_name, t.season
ORDER BY c.coffeeshop_name, 
    CASE t.season 
        WHEN 'winter' THEN 1 
        WHEN 'spring' THEN 2 
        WHEN 'summer' THEN 3 
        WHEN 'autumn' THEN 4 
    END;

-- Product seasonality
SELECT 
    p.product_name,
    t.season,
    COUNT(t.transaction_id) as sales_count,
    ROUND(COUNT(t.transaction_id) * 100.0 / SUM(COUNT(t.transaction_id)) OVER (PARTITION BY p.product_name), 2) as percentage
FROM c_transactions t
JOIN c_products p ON t.product_id = p.product_id
GROUP BY p.product_name, t.season
ORDER BY p.product_name, 
    CASE t.season 
        WHEN 'winter' THEN 1 
        WHEN 'spring' THEN 2 
        WHEN 'summer' THEN 3 
        WHEN 'autumn' THEN 4 
    END;
    
    

-- Ən çox gəlir gətirən şöbələr
SELECT 
    b.branch_name,
    c.coffeeshop_name,
    SUM(t.total_amount) AS total_revenue,
    COUNT(t.transaction_id) AS transaction_count,
    AVG(t.total_amount) AS avg_transaction_value
FROM c_transactions t
JOIN c_branches b ON t.branch_id = b.branch_id
JOIN c_coffeeshops c ON b.coffeeshop_id = c.coffeeshop_id
GROUP BY b.branch_name, c.coffeeshop_name
ORDER BY total_revenue DESC
FETCH FIRST 10 ROWS ONLY;

-- Reytinqlərin vaxt üzrə dəyişimi
SELECT 
    c.coffeeshop_name,
    COUNT(*) AS review_count,
    AVG(r.rating) AS avg_rating
FROM c_reviews r
JOIN c_coffeeshops c ON r.coffeeshop_id = c.coffeeshop_id
GROUP BY c.coffeeshop_name
ORDER BY c.coffeeshop_name;

-- Aylıq satış proqnozları (tarixi məlumatlara əsasən)
SELECT 
    c.coffeeshop_name,
    EXTRACT(MONTH FROM t.transaction_date) AS month,
    EXTRACT(YEAR FROM t.transaction_date) AS year,
    SUM(t.total_amount) AS monthly_revenue,
    COUNT(t.transaction_id) AS transaction_count,
    ROUND(SUM(t.total_amount)/COUNT(DISTINCT EXTRACT(DAY FROM t.transaction_date)), 2) AS avg_daily_revenue
FROM c_transactions t
JOIN c_branches b ON t.branch_id = b.branch_id
JOIN c_coffeeshops c ON b.coffeeshop_id = c.coffeeshop_id
GROUP BY c.coffeeshop_name, EXTRACT(MONTH FROM t.transaction_date), EXTRACT(YEAR FROM t.transaction_date)
ORDER BY c.coffeeshop_name, year, month;

-- Fəsillər üzrə büdcə paylanması tövsiyələri
SELECT 
    c.coffeeshop_name,
    t.season,
    SUM(t.total_amount) AS seasonal_revenue,
    ROUND(SUM(t.total_amount)*100.0/SUM(SUM(t.total_amount)) OVER (PARTITION BY c.coffeeshop_name), 2) AS revenue_percentage,
    AVG(bps.rating) AS avg_seasonal_rating
FROM c_transactions t
JOIN c_branches b ON t.branch_id = b.branch_id
JOIN c_coffeeshops c ON b.coffeeshop_id = c.coffeeshop_id
JOIN c_branch_performance_sales bps ON b.branch_id = bps.branch_id
GROUP BY c.coffeeshop_name, t.season
ORDER BY c.coffeeshop_name, 
    CASE t.season
        WHEN 'winter' THEN 1
        WHEN 'spring' THEN 2
        WHEN 'summer' THEN 3
        WHEN 'autumn' THEN 4
    END;
    
    

SELECT 
    branch_id,
    COUNT(*) AS total_transactions,
    SUM(transaction_qty) AS total_quantity
FROM 
    c_transactions
WHERE 
    EXTRACT(YEAR FROM transaction_date) = 2024
    AND EXTRACT(MONTH FROM transaction_date) = 7
GROUP BY 
    branch_id
ORDER BY 
    total_quantity DESC;




-- Hər Bir Qəhvəxana Üzrə Orta Qiymət
SELECT
    c.coffeeshop_name,
    AVG(t.price) AS average_price
FROM
    c_coffeeshops c
JOIN
    c_transactions t ON c.coffeeshop_id = (SELECT b.coffeeshop_id FROM c_branches b WHERE b.branch_id = t.branch_id)
GROUP BY
    c.coffeeshop_name;
    
    
-- Ən Çox Satılan Məhsullar (Bütün Filiallar Üzrə): Total quantity sold
SELECT
    p.product_name,
    SUM(t.transaction_qty) AS total_quantity_sold
FROM
    c_products p
JOIN
    c_transactions t ON p.product_id = t.product_id
GROUP BY
    p.product_name
ORDER BY
    total_quantity_sold DESC;
    
    
    
-- Ən Çox Satılan Məhsullar (Bütün Filiallar Üzrə): Total sales
SELECT
    p.product_name,
    SUM(t.transaction_qty) AS total_sales
FROM
    c_transactions t
JOIN
    c_products p ON t.product_id = p.product_id
GROUP BY
    p.product_name
ORDER BY
    p.product_name;
    
    
    
-- Reytinqi 4-dən yuxarı olan filialların adlarını tapmaq:
SELECT
    b.branch_name
FROM
    c_branches b
WHERE
    b.branch_id IN (SELECT branch_id FROM c_branch_performance_sales WHERE rating > 4);
    
    
-- Orta satış sayından daha çox satan filialları tapmaq:
SELECT
    b.branch_name
FROM
    c_branches b
WHERE
    b.branch_id IN (
        SELECT
            t.branch_id
        FROM
            c_transactions t
        GROUP BY
            t.branch_id
        HAVING
            SUM(t.transaction_qty) > (SELECT AVG(total_qty) FROM (SELECT SUM(transaction_qty) AS total_qty FROM c_transactions GROUP BY branch_id))
    );
    
    
    




-- SQL sorğusu ilə anomalyaları tapın
SELECT product_name, price 
FROM c_product_prices
JOIN c_products ON c_product_prices.product_id = c_products.product_id
WHERE price > 5; -- Normal kofe qiymətləri üçün maksimum threshold təyin edin

